import{e as s}from"./Cx1AvSPh.js";const c=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/create`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...e})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},l=async(a="",e)=>{let n=null;const o=await fetch(`${s}/tools/load/url`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({url:e})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},h=async(a="")=>{let e=null;const n=await fetch(`${s}/tools/`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async o=>{if(!o.ok)throw await o.json();return o.json()}).then(o=>o).catch(o=>(e=o.detail,console.error(o),null));if(e)throw e;return n},u=async(a="")=>{let e=null;const n=await fetch(`${s}/tools/list`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async o=>{if(!o.ok)throw await o.json();return o.json()}).then(o=>o).catch(o=>(e=o.detail,console.error(o),null));if(e)throw e;return n},p=async(a="")=>{let e=null;const n=await fetch(`${s}/tools/export`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async o=>{if(!o.ok)throw await o.json();return o.json()}).then(o=>o).catch(o=>(e=o.detail,console.error(o),null));if(e)throw e;return n},d=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},y=async(a,e,n)=>{let o=null;const t=await fetch(`${s}/tools/id/${e}/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...n})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(o=r.detail,console.error(r),null));if(o)throw o;return t},j=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}/delete`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},w=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}/valves`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},f=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}/valves/spec`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},T=async(a,e,n)=>{let o=null;const t=await fetch(`${s}/tools/id/${e}/valves/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...n})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(o=r.detail,console.error(r),null));if(o)throw o;return t},$=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}/valves/user`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},B=async(a,e)=>{let n=null;const o=await fetch(`${s}/tools/id/${e}/valves/user/spec`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(n=t.detail,console.error(t),null));if(n)throw n;return o},v=async(a,e,n)=>{let o=null;const t=await fetch(`${s}/tools/id/${e}/valves/user/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...n})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(o=r.detail,console.error(r),null));if(o)throw o;return t};export{d as a,w as b,c,f as d,T as e,j as f,h as g,u as h,p as i,$ as j,B as k,l,v as m,y as u};
//# sourceMappingURL=BQEMayK6.js.map
