import{e as c}from"./BmtUElco.js";const i=async(a="")=>{let o=null;const n=await fetch(`${c}/models/`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(o=t,console.error(t),null));if(o)throw o;return n},h=async(a="")=>{let o=null;const n=await fetch(`${c}/models/base`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(o=t,console.error(t),null));if(o)throw o;return n},p=async(a,o)=>{let n=null;const t=await fetch(`${c}/models/create`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify(o)}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>(n=r.detail,console.error(r),null));if(n)throw n;return t},d=async(a,o)=>{let n=null;const t=new URLSearchParams;t.append("id",o);const r=await fetch(`${c}/models/model?${t.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).then(e=>e).catch(e=>(n=e,console.error(e),null));if(n)throw n;return r},u=async(a,o)=>{let n=null;const t=new URLSearchParams;t.append("id",o);const r=await fetch(`${c}/models/model/toggle?${t.toString()}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).then(e=>e).catch(e=>(n=e,console.error(e),null));if(n)throw n;return r},w=async(a,o,n)=>{let t=null;const r=new URLSearchParams;r.append("id",o);const e=await fetch(`${c}/models/model/update?${r.toString()}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify(n)}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).then(s=>s).catch(s=>(t=s,console.error(s),null));if(t)throw t;return e},j=async(a,o)=>{let n=null;const t=new URLSearchParams;t.append("id",o);const r=await fetch(`${c}/models/model/delete?${t.toString()}`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).then(e=>e).catch(e=>(n=e.detail,console.error(e),null));if(n)throw n;return r},y=async a=>{let o=null;const n=await fetch(`${c}/models/delete/all`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(o=t,console.error(t),null));if(o)throw o;return n};export{i as a,h as b,p as c,j as d,y as e,d as g,u as t,w as u};
//# sourceMappingURL=DI1Dbocm.js.map
